{"version":3,"sources":["Game/Character.ts","Errors/OutOfRangeError.ts","Game/TTTField/TTTField.ts","Game/GameField/GameField.ts","Errors/GameErrors.ts","Game/Game.ts","Game/Field/FieldComponent.tsx","Game/TTTField/TTTFieldComponent.tsx","Game/GameField/GameFieldComponent.tsx","Game/GameHistory/GameHistoryComponent.tsx","Game/Background/BackgroundComponent.tsx","Game/GameWinner/GameWinnerComponent.tsx","Game/GameComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Character","OutOfRangeError","message","paramName","name","stack","this","Error","captureStackTrace","TypeError","TTTField","ownedFields","fields","undefined","Array","fill","length","field","slice","rawChar","char","Number","forEach","value","index","matchesAnyPattern","GameField","currentTurn","TTTfields","push","clone","Cross","Circle","TTTFieldWinners","map","v","i","Winner","wonTTTFields","result","winningPatterns","ipattern","x","ib","FieldOccupiedError","NotAllowedToPlaceOnFieldError","RewindDisabledError","GameAlreadyFinishedError","Game","history","currentlyShownFieldIndex","rewindEnabled","getPlaceableFields","bind","getDifferenceBetweenField","currentlyShownField","tttField","throwException","getField","GameWinner","clonedField","swapCharacter","currentTurnOfCurrentlyShownField","err","gameFieldIndex","getAllNullFields","createFilledFalseArrays","currentField","lastField","diff","getTTTField","isFieldFullyOccupied","fieldI","gameField","tttFieldI","gameField1","gameField2","tttFieldIndex","fieldIndex","CrossSvg","props","version","className","width","height","viewBox","y","style","transform","CircleSvg","cx","cy","r","stroke","strokeWidth","FieldComponent","character","highlight","onClick","fieldClicked","renderCircle","renderCross","animate","React","Component","TTTFieldComponent","placableFields","key","_char","renderField","renderWinner","GameFieldComponent","tttfield","_tttField","PureComponent","GameHistoryComponent","state","gameHistoryScrollWrapperRef","gameHistoryRef","gameHistoryWidth","gameHistoryScrollWrapperWidth","lastCalcedFieldsToDisplay","shouldScroll","lastScrollPos","createRef","event_gameHistoryScrollWrapperScroll","calcFieldsToDisplay","refreshWidths","newProps","newState","calcFields","selected","historyClicked","current","scrollTo","behavior","left","MAX_SAFE_INTEGER","display","ref","onScroll","_history","includes","renderHistory","location","items","totalItemsFit","Math","floor","_","begin","end","fieldsToDisplay","beginWidth","endWidth","clientWidth","computedStyle","window","getComputedStyle","children","replace","event","setState","scrollLeft","BackgroundComponent","opacity","dramaLevelToOpacity","dramaLevel","GameWinnerComponent","winner","onPlayAgainClicked","onViewGameHistoryClicked","GameComponent","game","gameWinDismissed","event_historyClicked","event_fieldClicked","resetGame","gameWinner","presentField","isInHistoryAndRewindDisabled","calcDramaLevel","filter","forceUpdate","place","console","error","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c054fc6e.chunk.js","sourcesContent":["enum Character\r\n{\r\n    Cross  = 0x0,\r\n    Circle = 0x1\r\n}\r\nexport default Character;\r\n","export default class OutOfRangeError implements Error\r\n{\r\n    name: string = \"OutOfRangeError\";\r\n    message: string;\r\n    paramName?: string;\r\n    stack?: string;\r\n    \r\n    constructor(message: string)\r\n    constructor(message: string, paramName: string)\r\n    constructor(message: string, paramName?: string) {\r\n        this.message = message;\r\n        this.paramName = paramName;\r\n        \r\n        if (\"captureStackTrace\" in Error)\r\n            Error.captureStackTrace(this, OutOfRangeError);\r\n        else\r\n            this.stack = (new TypeError()).stack;\r\n    }\r\n}","import Character from \"../Character\";\r\nimport OutOfRangeError from \"../../Errors/OutOfRangeError\";\r\nimport { matchesAnyPattern } from \"../GameField/GameField\";\r\n\r\n/**\r\n * @summary The normal, good old tic tac toe field.\r\n */\r\nexport default class TTTField\r\n{\r\n    fields: Array<Character | null>;\r\n\r\n    constructor(ownedFields?: Array<Character | null>)\r\n    {\r\n        if(ownedFields === undefined)\r\n            this.fields = new Array(9).fill(null);\r\n        else if(ownedFields.length !== 9)\r\n            throw new OutOfRangeError(\"There can only be 9 values.\", \"ownedFields\");\r\n        else\r\n            this.fields = ownedFields;\r\n    }\r\n\r\n    /**\r\n     * Gets the placed Character on a field, or null, if no one took the field.\r\n     * @param field The field to look for the owner for.\r\n     * @throws OutOfRangeError: The fied is not between 0 and 8.\r\n     */\r\n    getField(field: number): Character | null\r\n    {\r\n        if(field > 8 || field < 0)\r\n            throw new OutOfRangeError(\"Field must be between 0 and 8\", \"field\");\r\n        return this.fields[field];\r\n    }\r\n\r\n    /**\r\n     * Gets the winner of this Field, if a character has three of their marks \r\n     * in a horizontal, vertical, or diagonal row.\r\n     * @returns The character that won the Field, or null if nobody has won it... yet.\r\n     */\r\n    get Winner(): Character | null\r\n    {\r\n        for(let rawChar in Character)\r\n        {\r\n            let char = Number(rawChar);\r\n            let ownedFields = new Array<boolean>(9);\r\n            this.fields.forEach((value, index) => {\r\n                ownedFields[index] = value === char;\r\n            });\r\n            \r\n            if(matchesAnyPattern(ownedFields) !== null)\r\n                return char;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @summary Checks if the TTT-Field is occupied. \"Occupied\" meaning that the field has all of it's field already occupied by the players.\r\n     * @returns A boolean, being false if the TTT-Field is not occupied. True if otherwise.\r\n     */\r\n    get isFieldFullyOccupied(): boolean\r\n    {\r\n        for(let field of this.fields)\r\n            if(field === null)\r\n                return false;\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @summary Creates a clone of this object.\r\n     */\r\n    clone(): TTTField\r\n    {\r\n        return new TTTField(this.fields.slice());\r\n    }\r\n}","import TTTField from \"../TTTField/TTTField\"\r\nimport Character from \"../Character\"\r\nimport OutOfRangeError from \"../../Errors/OutOfRangeError\";\r\n\r\n/**\r\n * @summary The game's main playing field.\r\n * \r\n * A field consists of 9 Fields on a 3x3 grid. \r\n * \"Fields\" are your normal Tic-Tac-Toe fields you know of, \r\n * where players put their crosses and circles. If a player owns three fields \r\n * in a horizontal, vertical, or diagonal row, they win the entire game.\r\n */\r\nexport default class GameField\r\n{\r\n    fields: Array<TTTField>;\r\n    currentTurn: Character;\r\n\r\n    constructor(currentTurn: Character, fields?: Array<TTTField>)\r\n    {\r\n        if(fields === undefined)\r\n           this.fields = createTTTfields();\r\n        else if(fields.length !== 9)\r\n            throw new OutOfRangeError(\"There can only be 9 fields.\", \"fields\");\r\n        else\r\n            this.fields = fields;\r\n\r\n        this.currentTurn = currentTurn;\r\n    }\r\n\r\n    /**\r\n    * Gets the game winner, if there is a winner.\r\n    * @returns The character that has won, or null, if no one has won yet\r\n    */\r\n    get GameWinner(): [Character, Array<boolean>] | null\r\n    {\r\n        let TTTFieldWinners = new Array<Character | null>(9);\r\n        this.fields.map((v, i) => TTTFieldWinners[i] = v.Winner);\r\n        \r\n        for(let rawChar in Character)\r\n        {\r\n            let char = Number(rawChar);\r\n            let wonTTTFields = new Array<boolean>(9);\r\n            TTTFieldWinners.map((v, i) => wonTTTFields[i] = v === char);\r\n\r\n            let result = matchesAnyPattern(wonTTTFields);\r\n            if(result !== null)\r\n                return [char, result];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a TTTField,\r\n     * @param field The field\r\n     * @throws OutOfRangeError: The fied is not between 0 and 8.\r\n     */\r\n    getTTTField(field: number): TTTField\r\n    {\r\n        if(field > 8 || field < 0)\r\n            throw new OutOfRangeError(\"Field must be between 0 and 8\", \"field\");\r\n        return this.fields[field];\r\n    }\r\n\r\n    /**\r\n     * @summary Creates a clone of this object.\r\n     */\r\n    clone(): GameField\r\n    {\r\n        let TTTfields = new Array<TTTField>();\r\n        this.fields.forEach((value) => {\r\n            TTTfields.push(value.clone());\r\n        });\r\n        return new GameField(this.currentTurn, TTTfields);\r\n    }\r\n\r\n    /**\r\n     * @summary Swaps the character in the currentTurn field\r\n     */\r\n    swapCharacter()\r\n    {\r\n        if(this.currentTurn === Character.Cross)\r\n            this.currentTurn = Character.Circle;\r\n        else\r\n            this.currentTurn = Character.Cross;\r\n    }\r\n}\r\n\r\n/**\r\n * @summary Creates a new array with 8 TTT Fields.\r\n * @returns An array, containing 8 new TTT Fields\r\n */\r\nfunction createTTTfields(): Array<TTTField> {\r\n    return new Array<TTTField>(\r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField(), \r\n        new TTTField()\r\n    );\r\n}\r\n\r\nexport const winningPatterns = \r\n[\r\n    // Vertical 1\r\n    [\r\n        true , false, false,\r\n        true , false, false,\r\n        true , false, false\r\n    ],\r\n    // Vertical 2\r\n    [\r\n        false, true , false,\r\n        false, true , false,\r\n        false, true , false\r\n    ],\r\n    // Vertical 3\r\n    [\r\n        false, false, true,\r\n        false, false, true,\r\n        false, false, true\r\n    ],\r\n\r\n    // Horizontal 1\r\n    [\r\n        true , true , true ,\r\n        false, false, false,\r\n        false, false, false\r\n    ],\r\n    // Horizontal 2\r\n    [\r\n        false, false, false,\r\n        true , true , true ,\r\n        false, false, false\r\n    ],\r\n    // Horizontal 3 \r\n    [\r\n        false, false, false,\r\n        false, false, false,\r\n        true , true , true\r\n    ],\r\n    // Diagonal 1\r\n    [\r\n        true , false, false,\r\n        false, true , false,\r\n        false, false, true\r\n    ],\r\n    // Diagonal 2 \r\n    [\r\n        false, false, true ,\r\n        false, true , false,\r\n        true , false, false\r\n    ],\r\n    \r\n]\r\n\r\n/**\r\n * Returns a pattern (Array of booleans) if the fields match any patterns.  \r\n * @param fields The fields to look for a pattern.\r\n * @returns A matching winning pattern\r\n * @throws OutOfRangeError: The field's array length is not 9.\r\n */\r\nexport function matchesAnyPattern(fields: Array<boolean>): Array<boolean> | null\r\n{\r\n    if(fields.length !== 9)\r\n        throw new OutOfRangeError(\"There can only be 9 fields\", \"fields\");\r\n\r\n    // I am so sorry for this ugly function\r\n    for(let ipattern = 0; ipattern < 8; ipattern++)\r\n    {\r\n        let x = 0;\r\n        for(let ib = 0; ib < 9; ib++)\r\n        {\r\n            if(winningPatterns[ipattern][ib] && fields[ib])\r\n                x++;\r\n        }\r\n        if(x === 3)\r\n            return winningPatterns[ipattern];\r\n    }\r\n    return null;\r\n}","export class FieldOccupiedError implements Error\r\n{\r\n    name: string = \"FieldOccupiedError\";\r\n    message: string = \"This field is already occupied by someone.\";\r\n    stack?: any;\r\n    \r\n    constructor(message: string)\r\n    constructor(message?: string, ) {\r\n        if(message !== undefined)\r\n            this.message = message;\r\n        if (\"captureStackTrace\" in Error)\r\n            Error.captureStackTrace(this, FieldOccupiedError);\r\n        else\r\n            this.stack = (new TypeError()).stack;\r\n    }\r\n}\r\n\r\nexport class NotAllowedToPlaceOnFieldError implements Error\r\n{\r\n    name: string = \"NotAllowedToPlaceOnFieldError\";\r\n    message: string = \"Unable to place mark on this field due to the enemy's previous move.\";\r\n    stack?: any;\r\n    \r\n    constructor(message?: string)\r\n    constructor(message?: string) {\r\n        if(message !== undefined)\r\n            this.message = message;\r\n\r\n        if (\"captureStackTrace\" in Error)\r\n            Error.captureStackTrace(this, NotAllowedToPlaceOnFieldError);\r\n        else\r\n            this.stack = (new TypeError()).stack;\r\n    }\r\n}\r\n\r\nexport class RewindDisabledError implements Error\r\n{\r\n    name: string = \"RewindDisabledError\";\r\n    message: string = \"Cannot rewind: It is disabled.\";\r\n    stack?: string;\r\n    \r\n    constructor(message?: string)\r\n    constructor(message?: string) {\r\n        if(message !== undefined)\r\n            this.message = message;\r\n\r\n        if (\"captureStackTrace\" in Error)\r\n            Error.captureStackTrace(this, RewindDisabledError);\r\n        else\r\n            this.stack = (new TypeError()).stack;\r\n    }\r\n}\r\n\r\nexport class GameAlreadyFinishedError implements Error\r\n{\r\n    name: string = \"GameAlreadyFinished\";\r\n    message: string = \"The game has already been ended.\";\r\n    stack?: string;\r\n    \r\n    constructor(message?: string)\r\n    constructor(message?: string, stack?: string) {\r\n        if(message !== undefined)\r\n            this.message = message;\r\n        \r\n        if (\"captureStackTrace\" in Error)\r\n            Error.captureStackTrace(this, GameAlreadyFinishedError);\r\n        else\r\n            this.stack = (new TypeError()).stack;\r\n    }\r\n}\r\n","import Character from \"./Character\";\r\nimport GameField from \"./GameField/GameField\";\r\nimport OutOfRangeError from \"../Errors/OutOfRangeError\";\r\nimport { FieldOccupiedError, RewindDisabledError, NotAllowedToPlaceOnFieldError, GameAlreadyFinishedError } from \"../Errors/GameErrors\";\r\n\r\n/**\r\n * @summary Represents a Game. There should be only one instance of the game.\r\n */\r\nexport default class Game {\r\n    get currentTurnOfPresentField(): Character { return this.history[this.history.length - 1].currentTurn; };\r\n    get currentTurnOfCurrentlyShownField(): Character { return this.currentlyShownField.currentTurn; }\r\n    history: Array<GameField> = new Array<GameField>(new GameField(Character.Cross));\r\n    currentlyShownFieldIndex: number = 0;\r\n    rewindEnabled: boolean = true;\r\n    get currentlyShownField(): GameField { return this.history[this.currentlyShownFieldIndex]; };\r\n    get presentField(): GameField { return this.history[this.history.length - 1]; }\r\n\r\n    constructor()\r\n    {\r\n        this.getPlaceableFields = this.getPlaceableFields.bind(this);\r\n        this.getDifferenceBetweenField = this.getDifferenceBetweenField.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Places a mark on the field if valid.\r\n     * @param tttField The field that has been placed on.\r\n     * @param field The sub-field that has been placed on.\r\n     * @param throwException Throws an exception when the mark couldn't be successfully placed.\r\n     * @returns True if the mark has been successfully placed. False if otherwise.\r\n     */\r\n    place(tttField: number, field: number, throwException?: boolean): boolean {\r\n        try {\r\n            if (tttField > 8 || tttField < 0)\r\n                throw new OutOfRangeError(\"TTTField must be between 0 and 8.\", \"tttField\");\r\n            if (field > 8 || field < 0)\r\n                throw new OutOfRangeError(\"field must be between 0 and 8\", \"field\");\r\n\r\n            if (this.currentlyShownField.fields[tttField].getField(field) !== null)\r\n                throw new FieldOccupiedError(`TTTField ${tttField} field ${field} already occupied.`);\r\n\r\n            if (!this.rewindEnabled && this.history.length - 1 > this.currentlyShownFieldIndex)\r\n                throw new RewindDisabledError(\"Rewind isn't enabled.\");\r\n\r\n            if (this.currentlyShownField.GameWinner !== null)\r\n                throw new GameAlreadyFinishedError();\r\n\r\n            if (this.currentlyShownField.fields[tttField].Winner !== null)\r\n                throw new FieldOccupiedError(`TTTField ${tttField} already won by a player.`);\r\n\r\n            let placeableFields = this.getPlaceableFields(this.currentlyShownFieldIndex);\r\n            if(placeableFields[tttField][field] === false)\r\n                throw new NotAllowedToPlaceOnFieldError();\r\n\r\n            let clonedField = this.currentlyShownField.clone();\r\n            clonedField.swapCharacter();\r\n            clonedField.fields[tttField].fields[field] = this.currentTurnOfCurrentlyShownField;\r\n            this.history = this.history.slice(0, this.currentlyShownFieldIndex + 1);\r\n            this.history.push(clonedField);\r\n            this.currentlyShownFieldIndex++;\r\n\r\n\r\n        }\r\n        catch (err) {\r\n            if (throwException)\r\n                throw err;\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the field index the player must place to in the currently shown turn. \r\n     * @returns The field index. -1 if it can be any field.\r\n     */\r\n    getPlaceableFields(gameFieldIndex: number = this.currentlyShownFieldIndex): boolean[][] {\r\n        if (gameFieldIndex > this.history.length - 1)\r\n            throw new OutOfRangeError(\"fieldIndex cannot be larger than the history's length.\", \"fieldIndex\");\r\n        \r\n        if (gameFieldIndex - 1 < 0)\r\n            return this.getAllNullFields(this.history[gameFieldIndex]);\r\n        \r\n        if(this.history[gameFieldIndex].GameWinner !== null)\r\n            return this.createFilledFalseArrays();\r\n\r\n        let currentField = this.history[gameFieldIndex];\r\n        let lastField = this.history[gameFieldIndex - 1];\r\n\r\n        let diff = this.getDifferenceBetweenField(currentField, lastField);\r\n\r\n        if (currentField.getTTTField(diff[1]).Winner !== null)\r\n            return this.getAllNullFields(this.history[gameFieldIndex])\r\n\r\n        // Make sure that the field is not fully occupied \r\n        if(currentField.getTTTField(diff[1]).isFieldFullyOccupied)\r\n            return this.getAllNullFields(this.history[gameFieldIndex])\r\n\r\n\r\n        let result = this.createFilledFalseArrays();\r\n        \r\n\r\n        for(let fieldI = 0; fieldI < currentField.getTTTField(diff[1]).fields.length; fieldI++)\r\n        {\r\n            result[diff[1]][fieldI] = currentField.getTTTField(diff[1]).getField(fieldI) === null;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n    private getAllNullFields(gameField: GameField): boolean[][]\r\n    {\r\n        let result = this.createFilledFalseArrays();\r\n        \r\n        for(let tttFieldI = 0; tttFieldI < gameField.fields.length; tttFieldI++)\r\n        {\r\n            if(gameField.getTTTField(tttFieldI).Winner !== null) continue;\r\n\r\n            for(let fieldI = 0; fieldI < gameField.getTTTField(tttFieldI).fields.length; fieldI++)\r\n            {\r\n                result[tttFieldI][fieldI] = gameField.getTTTField(tttFieldI).getField(fieldI) === null;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    private createFilledFalseArrays(): boolean[][]\r\n    {\r\n        let result = new Array<boolean[]>(9);\r\n        for(let i = 0; i < 9; i++)\r\n            result[i] = new Array<boolean>(9).fill(false);\r\n        return result;\r\n    }\r\n\r\n    getDifferenceBetweenField(gameField1: GameField = this.currentlyShownField, gameField2: GameField = this.history[this.currentlyShownFieldIndex - 1]): [number, number] {\r\n\r\n        for(let tttFieldIndex = 0; tttFieldIndex < gameField1.fields.length; tttFieldIndex++)\r\n        {\r\n            for(let fieldIndex = 0; fieldIndex < gameField1.getTTTField(tttFieldIndex).fields.length; fieldIndex++)\r\n            {\r\n                if(gameField1.getTTTField(tttFieldIndex).getField(fieldIndex) !== gameField2.getTTTField(tttFieldIndex).getField(fieldIndex))\r\n                    return [tttFieldIndex, fieldIndex];\r\n                \r\n                    \r\n            }\r\n            \r\n        }\r\n\r\n        throw new Error(\"No differences found.\");\r\n    }\r\n\r\n\r\n}","import React from \"react\";\r\nimport Character from \"../Character\";\r\nimport './Field.css';\r\n\r\nexport const CrossSvg = (props: {className?: string}) => \r\n    <svg version=\"1.1\" name=\"cross\" className={props.className} width=\"64\" height=\"64\" viewBox=\"0 0 64 64\">\r\n        <rect x=\"-40\" y=\"40\" style={{transform: \"rotate(-45deg)\"}} fill=\"currentColor\" width=\"80\" height=\"10\"/>\r\n        <rect x=\"5\" y=\"-5\" style={{transform: \"rotate(45deg)\"}} fill=\"currentColor\" width=\"80\" height=\"10\"/>\r\n    </svg>\r\n\r\nexport const CircleSvg = (props: {className?: string}) =>\r\n    <svg version=\"1.1\" name=\"circle\" className={props.className} width=\"64\" height=\"64\" viewBox=\"0 0 64 64\">\r\n        <circle cx=\"32\" cy=\"32\" r=\"27\" width=\"64\" height=\"10\" stroke=\"currentColor\" fill=\"transparent\" strokeWidth=\"10\"/>\r\n    </svg>\r\n\r\n\r\nexport default class FieldComponent extends React.Component<{character: Character | null, highlight?: boolean, animate?: boolean, fieldClicked?: () => void}>\r\n{\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div\r\n            className={\"field\"+(this.props.character !== null ? \" \"+this.props.character:\"\")+(this.props.highlight?\" highlight\":\"\")}\r\n            onClick={() => {if(this.props.fieldClicked) this.props.fieldClicked()}}\r\n            >\r\n                {this.props.character === Character.Circle && this.renderCircle()}\r\n                {this.props.character === Character.Cross && this.renderCross()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCircle()\r\n    {\r\n        if(!this.props.animate)\r\n            return <CircleSvg/>\r\n            return  <CircleSvg className=\"animate\"/>\r\n            \r\n    }\r\n    renderCross()\r\n    {\r\n        if(!this.props.animate)\r\n            return <CrossSvg/>\r\n        return  <CrossSvg className=\"animate\"/>\r\n        \r\n    }\r\n}","import React from \"react\";\r\nimport TTTField from \"./TTTField\";\r\nimport './TTTField.css';\r\nimport FieldComponent from \"../Field/FieldComponent\";\r\n\r\nexport default class TTTFieldComponent extends React.Component<{tttField: TTTField, placableFields?: boolean[], animate?: boolean, fieldClicked?: (field: number) => void}, {}>\r\n{\r\n    renderField(i: number)\r\n    {\r\n        let field = this.props.tttField.getField(i);\r\n        return (\r\n            <FieldComponent\r\n            character={field}\r\n            animate={this.props.animate}\r\n            highlight={this.props.placableFields === undefined ? false : this.props.placableFields[i]}\r\n            fieldClicked={() => {if(this.props.fieldClicked) this.props.fieldClicked(i)}}\r\n            key={i}\r\n            />\r\n        )\r\n    }\r\n\r\n    renderWinner()\r\n    {\r\n        return (\r\n            <div className=\"tttfield-winner\">\r\n                <FieldComponent character={this.props.tttField.Winner} animate={this.props.animate} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className={\"tttfield\"+(this.props.tttField.isFieldFullyOccupied||this.props.tttField.Winner!==null?\" hide\":\"\")}>\r\n                {this.props.tttField.fields.map((_char, index) => {\r\n                    return this.renderField(index);\r\n                })}\r\n                {this.props.tttField.Winner !== null && this.renderWinner()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport GameField from \"../GameField/GameField\";\r\nimport TTTFieldComponent from \"../TTTField/TTTFieldComponent\";\r\nimport \"./GameField.css\";\r\n\r\nexport default class GameFieldComponent extends React.PureComponent<{gameField: GameField, placableFields?: boolean[][], animate?: boolean, fieldClicked?: (tttfield: number, field: number) => void }, {}>\r\n{\r\n\r\n    renderField(tttfield: number)\r\n    {\r\n        \r\n        return (\r\n            <TTTFieldComponent\r\n            tttField={this.props.gameField.fields[tttfield]}\r\n            placableFields={this.props.placableFields === undefined ? undefined : this.props.placableFields[tttfield]}\r\n            animate={this.props.animate}\r\n            fieldClicked={(field: number) => {if(this.props.fieldClicked) this.props.fieldClicked(tttfield, field)}}\r\n            key={tttfield}\r\n            />\r\n        )\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"gamefield\">\r\n                {this.props.gameField.fields.map((_tttField, index) => {\r\n                    return this.renderField(index);\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport './GameHistory.css';\r\nimport GameField from \"../GameField/GameField\";\r\nimport GameFieldComponent from \"../GameField/GameFieldComponent\";\r\n\r\nexport default class GameHistoryComponent extends React.Component<{ history: Array<GameField>, selected: number, historyClicked?: (move: number) => void }, {lastScrollPos: number}>\r\n{\r\n\r\n    gameHistoryScrollWrapperRef: React.RefObject<HTMLInputElement>;\r\n    gameHistoryRef: React.RefObject<HTMLInputElement>;\r\n    gameHistoryWidth: number | null = 112+32;\r\n    gameHistoryScrollWrapperWidth: number | null = null;\r\n\r\n    lastCalcedFieldsToDisplay:  [number, number[], number] | null = null;\r\n\r\n    constructor(props: {history: Array<GameField>, selected: number, historyClicked?: (move: number) => void }, state: {lastScrollPos: number})\r\n    {\r\n        super(props, state);\r\n        \r\n        this.state = {lastScrollPos: 0};\r\n        \r\n        this.gameHistoryScrollWrapperRef = React.createRef();\r\n        this.gameHistoryRef = React.createRef();\r\n\r\n        this.event_gameHistoryScrollWrapperScroll = this.event_gameHistoryScrollWrapperScroll.bind(this);\r\n        this.calcFieldsToDisplay = this.calcFieldsToDisplay.bind(this);\r\n        this.refreshWidths = this.refreshWidths.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(newProps: {history: Array<GameField>, selected: number, historyClicked?: (move: number) => void }, newState: {lastScrollPos: number}): boolean\r\n    {\r\n        if(this.state.lastScrollPos !== newState.lastScrollPos && this.lastCalcedFieldsToDisplay !== null)\r\n        {\r\n            let calcFields = this.calcFieldsToDisplay(newState.lastScrollPos);\r\n            if(calcFields !== null) {\r\n                if(\r\n                    calcFields[0] !== this.lastCalcedFieldsToDisplay[0] ||\r\n                    calcFields[2] !== this.lastCalcedFieldsToDisplay[2]\r\n                  )\r\n                     return true;\r\n            }\r\n            \r\n        }\r\n\r\n        if(newProps.selected !== this.props.selected)\r\n        {\r\n            if(newProps.selected === newProps.history.length-1)\r\n                this.shouldScroll = true;\r\n            return true;\r\n        }\r\n\r\n        if(newProps.historyClicked !== this.props.historyClicked)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    shouldScroll: boolean = false;\r\n    componentDidUpdate()\r\n    {\r\n        this.refreshWidths();\r\n\r\n        if(this.props.selected !== this.props.history.length-1) return;\r\n\r\n        if(this.gameHistoryScrollWrapperRef.current !== null && this.shouldScroll)\r\n        {\r\n            this.shouldScroll = false;\r\n            let scrollWrapper = this.gameHistoryScrollWrapperRef.current;\r\n            scrollWrapper.scrollTo({behavior: \"smooth\", left: Number.MAX_SAFE_INTEGER})\r\n        }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.refreshWidths();\r\n    }\r\n\r\n    renderHistory(i: number, highlight: boolean)\r\n    {\r\n        let field = this.props.history[i];\r\n        return (\r\n            <div\r\n                className={\"gamehistory-gamefield-wrapper\"+\" move-\"+(i+1)+(highlight?\" selected\":\"\")}\r\n                onClick={() => { if (this.props.historyClicked) this.props.historyClicked(i) }}\r\n                key={i}>\r\n                <GameFieldComponent\r\n                    gameField={field}\r\n                />\r\n                <div className=\"gamehistory-gamefield-number-wrapper\">\r\n                    <span className=\"gamehistory-gamefield-number\">{i+1}</span>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render()\r\n    {\r\n        let display = this.lastCalcedFieldsToDisplay = this.calcFieldsToDisplay();\r\n        return (\r\n            <div\r\n            className=\"gamehistory-scroll-wrapper scroll-wrapper\"\r\n            ref={this.gameHistoryScrollWrapperRef}\r\n            onScroll={this.event_gameHistoryScrollWrapperScroll}\r\n            >\r\n                <div className=\"gamehistory\" ref={this.gameHistoryRef}>\r\n                    <div className=\"scroller-filler\" style={{width:display===null?0:display[0]}} />\r\n                    \r\n                    {this.props.history.map((_history, index) => {\r\n                        if(display === null || display[1].includes(index))\r\n                            return this.renderHistory(index, this.props.selected === index);\r\n                    })}\r\n\r\n                    <div className=\"scroller-filler\" style={{width:display===null?0:display[2]}} />\r\n                </div>\r\n            </div>\r\n                \r\n        );\r\n    }\r\n\r\n    calcFieldsToDisplay(location: number = this.state.lastScrollPos): [number, number[], number] | null\r\n    {\r\n        if(this.gameHistoryScrollWrapperWidth === null)\r\n            return null;\r\n        if(this.gameHistoryWidth === null)\r\n            return null;\r\n\r\n        let items = this.props.history.length;\r\n        let totalItemsFit = Math.floor(this.gameHistoryScrollWrapperWidth / (this.gameHistoryWidth));\r\n\r\n        if(totalItemsFit > items)\r\n            return [0, this.props.history.map((_, i) => i), 0]\r\n\r\n        let begin = Math.floor((location / this.gameHistoryWidth) - 1);\r\n        let end = Math.floor(begin + totalItemsFit + 3);\r\n        if(end > items) end = items;\r\n        \r\n        let fieldsToDisplay: number[] = [];\r\n        \r\n        this.props.history.forEach((_, i) => {\r\n            if(i >= begin && i < end)\r\n                fieldsToDisplay.push(i);\r\n        });\r\n\r\n        let beginWidth = begin * this.gameHistoryWidth;\r\n        if(beginWidth < 0) beginWidth = 0;\r\n        \r\n        //let endWidth = (end * this.gameHistoryWidth) - (items * this.gameHistoryWidth);\r\n        let endWidth = (items * this.gameHistoryWidth) - (end * this.gameHistoryWidth);\r\n\r\n        return [beginWidth, fieldsToDisplay, endWidth];\r\n    }\r\n\r\n    refreshWidths()\r\n    {\r\n        if(this.gameHistoryScrollWrapperRef.current !== null)\r\n        {\r\n            this.gameHistoryScrollWrapperWidth = this.gameHistoryScrollWrapperRef.current.clientWidth\r\n            if(this.gameHistoryRef.current !== null && this.props.history.length > 0)\r\n            {\r\n                let computedStyle = window.getComputedStyle(this.gameHistoryRef.current.children[1]);\r\n                if(computedStyle.width === null)\r\n                    return;\r\n                // computedStyle.padding, computedStyle.paddingLeft & computedStyle.paddingRight DO NOT WORK. I don't know why.\r\n                this.gameHistoryWidth = Number(computedStyle.width.replace(\"px\",\"\")) + 32;\r\n            }\r\n        }\r\n    }\r\n\r\n    event_gameHistoryScrollWrapperScroll(event: React.UIEvent<HTMLDivElement>)\r\n    {\r\n        if(this.gameHistoryScrollWrapperRef.current !== null)\r\n        {\r\n            this.setState({lastScrollPos: this.gameHistoryScrollWrapperRef.current.scrollLeft});\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport Character from \"../Character\";\r\nimport './Background.css';\r\nimport {CircleSvg, CrossSvg} from '../Field/FieldComponent';\r\n\r\n\r\nexport default class BackgroundComponent extends React.Component<{currentTurn: Character | null, dramaLevel: number}>\r\n{\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className={\"background\"}>\r\n                <div className={\"background-char cross\"+(this.props.currentTurn===Character.Cross?\" selected\":\"\")}>\r\n                    <CrossSvg/>\r\n                </div>\r\n                <div className={\"background-char circle\"+(this.props.currentTurn===Character.Circle?\" selected\":\"\")}>\r\n                    <CircleSvg/>\r\n                </div>\r\n                <div className=\"background-solid\" />\r\n                <div className=\"background-gradient\" style={{opacity: 1 - this.dramaLevelToOpacity()}}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    dramaLevelToOpacity(): number\r\n    {\r\n        if(this.props.dramaLevel === undefined)\r\n            return 0;\r\n        return this.props.dramaLevel / 75; \r\n    }\r\n}","import React from \"react\";\r\nimport './GameWinner.css';\r\nimport Character from \"../Character\";\r\nimport FieldComponent from \"../Field/FieldComponent\";\r\n\r\nexport default class GameWinnerComponent extends React.Component<{ winner: Character, onPlayAgainClicked?: Function, onViewGameHistoryClicked?: Function }>\r\n{\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"game-winner\">\r\n                <FieldComponent character={this.props.winner} animate={true} />\r\n                <span className=\"game-winner-winner-text\">{this.props.winner === Character.Cross ? \"X\":\"O\"} hat gewonnen!</span>\r\n                <button onClick={() => {if(this.props.onPlayAgainClicked) this.props.onPlayAgainClicked();}}>Neues Spiel beginnen</button>\r\n                <button onClick={() => {if(this.props.onViewGameHistoryClicked) this.props.onViewGameHistoryClicked();}}>Spielhistorie anschauen</button>\r\n            </div>\r\n                \r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Game from \"./Game\";\r\nimport GameFieldComponent from \"./GameField/GameFieldComponent\";\r\nimport \"./Game.css\"\r\nimport GameHistoryComponent from \"./GameHistory/GameHistoryComponent\";\r\nimport BackgroundComponent from \"./Background/BackgroundComponent\";\r\nimport GameWinnerComponent from \"./GameWinner/GameWinnerComponent\";\r\n\r\nexport default class GameComponent extends React.Component<{}, {gameWinDismissed: boolean}>\r\n{\r\n    game: Game = new Game();\r\n\r\n    constructor(props: {}, state: {gameWinDismissed: boolean})\r\n    {\r\n        super(props, state);\r\n        this.state = {gameWinDismissed: false};\r\n\r\n        this.event_historyClicked = this.event_historyClicked.bind(this);\r\n        this.event_fieldClicked = this.event_fieldClicked.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n    }\r\n\r\n    render()\r\n    {\r\n        let gameWinner = this.game.presentField.GameWinner;\r\n\r\n        return (\r\n            <div className={\"game\"+(this.game.currentlyShownFieldIndex !== this.game.history.length-1?\" viewing-history\":\"\")}>\r\n                <div className={\"game-gamefield-wrapper\"+(this.isInHistoryAndRewindDisabled() ? \" disabled\":\"\")}>\r\n                    <GameFieldComponent\r\n                    gameField={this.game.currentlyShownField}\r\n                    animate={true}\r\n                    placableFields={(\r\n                        this.isInHistoryAndRewindDisabled() ? undefined : \r\n                        this.game.getPlaceableFields(this.game.currentlyShownFieldIndex)\r\n                    )}\r\n                    fieldClicked={this.event_fieldClicked} />\r\n                </div>\r\n                \r\n                <GameHistoryComponent history={this.game.history} selected={this.game.currentlyShownFieldIndex} historyClicked={this.event_historyClicked}/>\r\n                <BackgroundComponent currentTurn={this.game.currentTurnOfCurrentlyShownField} dramaLevel={this.calcDramaLevel()}/>\r\n\r\n                {((gameWinner !== null && !this.state.gameWinDismissed) &&\r\n                <GameWinnerComponent \r\n                    winner={gameWinner[0]}\r\n                    onViewGameHistoryClicked={() => this.setState({gameWinDismissed: true})}\r\n                    onPlayAgainClicked={this.resetGame}/>)}\r\n\r\n                {this.state.gameWinDismissed && <button onClick={this.resetGame}>Neues Spiel</button>}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    calcDramaLevel(): number\r\n    {\r\n        return this.game.history.length + (this.game.presentField.fields.filter((v) => {return v.Winner != null}).length * 10);\r\n    }\r\n\r\n    isInHistoryAndRewindDisabled(): boolean\r\n    {\r\n        return ((this.game.currentlyShownFieldIndex !== this.game.history.length-1) && !this.game.rewindEnabled);\r\n    }\r\n\r\n    resetGame()\r\n    {\r\n        \r\n        this.game = new Game();\r\n        this.setState({gameWinDismissed: false});\r\n    }\r\n\r\n    event_historyClicked(index: number)\r\n    {\r\n        this.game.currentlyShownFieldIndex = index;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    event_fieldClicked(tttfield: number, field: number)\r\n    {\r\n        try\r\n        {\r\n            this.game.place(tttfield, field, true)\r\n            this.forceUpdate();\r\n        }\r\n        catch(err)\r\n        {\r\n            console.error(`Error placing at tttfield ${tttfield}  field ${field}`, err);\r\n        }\r\n        \r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport GameComponent from './Game/GameComponent';\n\nconst App: React.FC = () => {\n\n  return(\n    <GameComponent/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app-mount'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}